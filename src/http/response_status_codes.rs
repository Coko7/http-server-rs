use std::fmt::Display;

pub enum HttpStatusCode {
    // 1XX
    Continue = 100,
    SwitchingProtocols = 101,
    ProcessingDeprecated = 102,
    EarlyHints = 103,
    // 2XX
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,
    // 3XX
    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    UseProxyDeprecated = 305,
    Unused = 306,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,
    // 4XX
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    ContentTooLarge = 413,
    URITooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableContent = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarlyExperimental = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    // 5XX
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

impl Display for HttpStatusCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let value = match self {
            // 1XX
            HttpStatusCode::Continue => "100 Continue",
            HttpStatusCode::SwitchingProtocols => "101 Switching Protocols",
            HttpStatusCode::ProcessingDeprecated => "102 Processing Deprecated",
            HttpStatusCode::EarlyHints => "103 EarlyHints",
            // 2XX
            HttpStatusCode::OK => "200 OK",
            HttpStatusCode::Created => "201 Created",
            HttpStatusCode::Accepted => "202 Accepted",
            HttpStatusCode::NonAuthoritativeInformation => "203 Non Authoritative Information",
            HttpStatusCode::NoContent => "204 No Content",
            HttpStatusCode::ResetContent => "205 Reset Content",
            HttpStatusCode::PartialContent => "206 Partial Content",
            HttpStatusCode::MultiStatus => "207 Multi Status",
            HttpStatusCode::AlreadyReported => "208 Already Reported",
            HttpStatusCode::IMUsed => "226 IM Used",
            // 3XX
            HttpStatusCode::MultipleChoices => "300 Multiple Choices",
            HttpStatusCode::MovedPermanently => "301 Moved Permanently",
            HttpStatusCode::Found => "302 Found",
            HttpStatusCode::SeeOther => "303 See Other",
            HttpStatusCode::NotModified => "304 Not Modified",
            HttpStatusCode::UseProxyDeprecated => "305 Use Proxy Deprecated",
            HttpStatusCode::Unused => "306 Unused",
            HttpStatusCode::TemporaryRedirect => "307 Temporary Redirect",
            HttpStatusCode::PermanentRedirect => "308 Permanent Redirect",
            // 4XX
            HttpStatusCode::BadRequest => "400 Bad Request",
            HttpStatusCode::Unauthorized => "401 Unauthorized",
            HttpStatusCode::PaymentRequired => "402 Payment Required",
            HttpStatusCode::Forbidden => "403 Forbidden",
            HttpStatusCode::NotFound => "404 Not Found",
            HttpStatusCode::MethodNotAllowed => "405 Method Not Allowed",
            HttpStatusCode::NotAcceptable => "406 Not Acceptable",
            HttpStatusCode::ProxyAuthenticationRequired => "407 Proxy Authentication Required",
            HttpStatusCode::RequestTimeout => "408 Request Timeout",
            HttpStatusCode::Conflict => "409 Conflict",
            HttpStatusCode::Gone => "410 Gone",
            HttpStatusCode::LengthRequired => "411 Length Required",
            HttpStatusCode::PreconditionFailed => "412 Precondition Failed",
            HttpStatusCode::ContentTooLarge => "413 Content Too Large",
            HttpStatusCode::URITooLong => "414 URI Too Long",
            HttpStatusCode::UnsupportedMediaType => "415 Unsupported Media Type",
            HttpStatusCode::RangeNotSatisfiable => "416 Range Not Satisfiable",
            HttpStatusCode::ExpectationFailed => "417 Expectation Failed",
            HttpStatusCode::ImATeapot => "418 I'm a Teapot",
            HttpStatusCode::MisdirectedRequest => "421 Misdirected Request",
            HttpStatusCode::UnprocessableContent => "422 Unprocessable Content",
            HttpStatusCode::Locked => "423 Locked",
            HttpStatusCode::FailedDependency => "424 Failed Dependency",
            HttpStatusCode::TooEarlyExperimental => "425 Too Early Experimental",
            HttpStatusCode::UpgradeRequired => "426 Upgrade Required",
            HttpStatusCode::PreconditionRequired => "428 Precondition Required",
            HttpStatusCode::TooManyRequests => "429 Too Many Requests",
            HttpStatusCode::RequestHeaderFieldsTooLarge => "431 Request Header Fields Too Large",
            HttpStatusCode::UnavailableForLegalReasons => "451 Unavailable For Legal Reasons",
            // 5XX
            HttpStatusCode::InternalServerError => "500 Internal Server Error",
            HttpStatusCode::NotImplemented => "501 Not Implemented",
            HttpStatusCode::BadGateway => "502 Bad Gateway",
            HttpStatusCode::ServiceUnavailable => "503 Service Unavailable",
            HttpStatusCode::GatewayTimeout => "504 Gateway Timeout",
            HttpStatusCode::HTTPVersionNotSupported => "505 HTTP Version Not Supported",
            HttpStatusCode::VariantAlsoNegotiates => "506 Variant Also Negotiates",
            HttpStatusCode::InsufficientStorage => "507 Insufficient Storage",
            HttpStatusCode::LoopDetected => "508 Loop Detected",
            HttpStatusCode::NotExtended => "510 Not Extended",
            HttpStatusCode::NetworkAuthenticationRequired => "511 Network Authentication Required",
        };

        write!(f, "{}", value)
    }
}
